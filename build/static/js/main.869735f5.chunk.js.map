{"version":3,"sources":["dev.png","I1.png","firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","prop","useState","comments","setcomments","comment","setcomment","useEffect","unsubscribe","postid","collection","doc","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","tanay","username","imageUrl","caption","text","type","placeholder","onChange","e","target","value","onClick","event","preventDefault","add","user","displayName","ImageUpload","setCaption","progress","setProgress","image","setImage","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","timestamp","FieldValue","serverTimestamp","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","posts","setPosts","open","setOpen","setusername","email","setEmail","password","setPassword","setUser","openSignIn","setOpenSignIn","modalStyle","classes","onAuthStateChanged","authUser","orderBy","post","id","Modal","onClose","style","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.869735f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dev.4231b85f.png\";","module.exports = __webpack_public_path__ + \"static/media/I1.d5ead2c5.png\";","import firebase from \"firebase\";\r\n\r\n\r\nconst firebaseapp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyCHNS84lW4_ELGC63h8hUkY7Sd_khdeD6E\",\r\n    authDomain: \"instagram-clone-71729.firebaseapp.com\",\r\n    databaseURL: \"https://instagram-clone-71729.firebaseio.com\",\r\n    projectId: \"instagram-clone-71729\",\r\n    storageBucket: \"instagram-clone-71729.appspot.com\",\r\n    messagingSenderId: \"274696360859\",\r\n    appId: \"1:274696360859:web:c9e80e9b207a38c236c73e\",\r\n    measurementId: \"G-B6JXZP6PH8\"\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst db = firebaseapp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\n\r\nexport { db, auth, storage };","import React, { useState, useEffect } from 'react';\r\nimport { db } from './firebase';\r\nimport \"./Post.css\"\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport tanay from './dev.png'\r\nimport I1 from './I1.png'\r\n\r\nfunction Post(prop) {\r\n  \r\n    let [comments, setcomments] = useState([]);\r\n    let [comment, setcomment] = useState([]);\r\n\r\n    useEffect(() => {\r\n        let unsubscribe;\r\n        if(prop.postid){\r\n       unsubscribe= db.collection('posts').doc(prop.postid).collection('comments').onSnapshot(snapshot => {\r\n            setcomments(snapshot.docs.map(doc => doc.data()\r\n    \r\n            ));\r\n        })\r\n    }\r\n\r\n  \r\n    return()=>{ unsubscribe()};\r\n    }, [prop.postid])\r\n\r\n    let postcomment = (event) => {\r\n       event.preventDefault();\r\n       db.collection('posts').doc(prop.postid).collection('comments').add({\r\n           text:comment,\r\n           username:prop.user.displayName \r\n       });\r\n       setcomment('')\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"post\">\r\n        <div className=\"post__header\">\r\n            <Avatar className=\"post__avatar\"  alt=\"Tanay Tapanshu\" src={tanay} />\r\n    <h3>{prop.username}</h3>\r\n       {/*header -> avtar + username */}\r\n            </div>\r\n\r\n            <img className=\"post__image img-fluid\"  src={prop.imageUrl}/> \r\n          {/* image */}\r\n          <h4 className=\"post__text\"><strong>{prop.username}</strong> {prop.caption}</h4>\r\n\r\n\r\n\r\n          \r\n            <div className=\"post__comments\">\r\n            {\r\n               comments.map((comment) => (\r\n                   <p>\r\n                    <b>{comment.username}</b> \r\n                       {comment.text}\r\n                   </p>\r\n\r\n\r\n               ))\r\n\r\n            }\r\n            </div>  \r\n\r\n\r\n\r\n          \r\n         \r\n       <form>\r\n           <input \r\n              className=\"post__input\"\r\n              type=\"text\"\r\n              placeholder=\"Add comment\"\r\n              onChange={(e)=> setcomment(e.target.value)}\r\n\r\n\r\n           />\r\n\r\n                <button\r\n                    className=\"post__button\"\r\n                    type=\"text\"\r\n                     \r\n                    onClick={postcomment}\r\n\r\n\r\n                >Post</button>\r\n\r\n\r\n\r\n\r\n       </form>\r\n\r\n          {/* username + caption */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React,{useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {storage,db} from './firebase'\r\nimport firebase from \"firebase\";\r\nimport './ImageUpload.css'\r\n\r\nfunction ImageUpload({username}) {\r\n    const [caption,setCaption] = useState('');\r\n    const [progress, setProgress] = useState(0);\r\n    const [image , setImage]= useState(null);\r\n\r\n   const handleChange = (e) => {\r\n      \r\n      if(e.target.files[0])\r\n        {\r\n          setImage(e.target.files[0]);\r\n      }\r\n\r\n   }\r\n\r\n    const handleUpload = () =>{\r\n        const uploadTast = storage.ref(`images/${image.name}`).put(image);\r\n  \r\n        uploadTast.on(\r\n           \"state_changed\",\r\n           (snapshot) => {\r\n//progressfunction\r\n            const progress = Math.round(\r\n                (snapshot.bytesTransferred/ snapshot.totalBytes) * 100\r\n\r\n            );\r\n            setProgress(progress);\r\n\r\n           },\r\n           (error) => {\r\n               console.log(error);\r\n               alert(error.message)\r\n           } ,\r\n           ()=> {\r\n             \r\n              storage\r\n               .ref(\"images\")\r\n               .child(image.name)\r\n               .getDownloadURL()\r\n               .then(url => {\r\n                   //post image inside DB\r\n                  \r\n                 db.collection(\"posts\").add({\r\n                     timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                     caption:caption,\r\n                     imageUrl: url,\r\n                     username:username\r\n                 });\r\n                 setProgress(0)\r\n                 setCaption('')\r\n                 setImage(null);\r\n\r\n               })\r\n\r\n\r\n           }  \r\n              \r\n\r\n         ) \r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"imagupload\">\r\n      {/* I want to have a Post uploader */}\r\n            {/* Caption Input */}\r\n            {/* File Picker */}\r\n            {/* Post button */}\r\n            <progress className=\"imageprogress\" value={progress} max=\"100\" />\r\n           <input type =\"text\" placeholder='Enter a caption... ' onChange={event => setCaption(event.target.value)}/>\r\n            <input type=\"file\" onChange={handleChange} />\r\n            <Button  onClick={handleUpload} >\r\n            Upload </Button> \r\n                          \r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageUpload\r\n","import React, { useState,useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Post from \"./Post\"\nimport './App.css';\nimport { db } from './firebase';\nimport Button from '@material-ui/core/Button';\nimport { auth } from './firebase';\nimport ImageUpload from './ImageUpload.js'\nimport InstagramEmbed from 'react-instagram-embed';\n\n// useEffect runs a code based on a specific condition\n\n\n\nfunction getModalStyle() {\n  const top = 50 ;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n\nfunction App() {\n\n const [posts, setPosts] = useState([]) ;\n const [open, setOpen] = useState(false);\n const [username,setusername] = useState('');\n const [email,setEmail] = useState('');\n const [password,setPassword] = useState('');\n const [user, setUser] = useState(null);\n const [openSignIn,setOpenSignIn] = useState(false)\n\n\n\n  const [modalStyle] = useState(getModalStyle);\n const classes = useStyles();\n\n\nuseEffect(()=>{\nauth.onAuthStateChanged((authUser) => {\n\n  if(authUser) {\n   \n   //user has logged in..\n\n   console.log(authUser);\n   setUser(authUser);\n\n  \n\n  } else {\n\n   //user has logged out..\n    \n    setUser(null);\n\n  }\n}) \n\n\n}, [user, username]);\n\n\n useEffect(() => {\n db.collection('posts').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n   setPosts(snapshot.docs.map(doc => ({post:doc.data(),\n                                       id:doc.id  })));\n })\n },[])\n\n const signup = (event)=>{\n   event.preventDefault();\n\n   auth\n   .createUserWithEmailAndPassword(email, password)\n   .then((authUser) => {\n     return authUser.user.updateProfile({\n       displayName: username\n     })\n   })\n   .catch((error) => alert(error.message));\n\n   setOpen(false);\n   \n };\n\n  const signIn = (e) => {\n    e.preventDefault();\n    auth.signInWithEmailAndPassword(email,password)\n    .catch((error) => alert(error.message))\n\n    setOpenSignIn(false)\n  }\n\n  return (\n    <div className=\"App\">\n    \n\n      <Modal\n\n\n        open={open}\n        onClose={(open) => setOpen(false)}\n\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__form\">\n            <center id=\"center\">\n              <img\n                className=\"app_headerImage \"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo-2x.png/1b47f9d0e595.png\" />\n\n              <input\n                placeholder=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setusername(e.target.value)}\n\n              />\n\n\n\n              <input\n                placeholder=\"email\"\n                type=\"text\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n\n              />\n\n              <input\n                placeholder=\"password\"\n                type=\"text\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n\n              />\n              <Button type=\"sumbit\" onClick={signup}>Sign-up</Button>\n            </center>\n          </form>\n        </div>\n      </Modal>\n\n\n\n\n    <Modal\n        open={openSignIn}\n        onClose={(open) => setOpenSignIn(false)}\n       \n      >\n      <div style={modalStyle} className={classes.paper}>\n      <form className=\"app__form\">\n      <center id=\"center\">\n      <img \n          className=\"app_headerImage \"\n                src=\"\nhttps://www.instagram.com/static/images/web/mobile_nav_type_logo-2x.png/1b47f9d0e595.png\" />\n          \n      \n      \n       <input  \n        placeholder=\"email\"\n        type=\"text\"\n       \n        onChange={(e) => setEmail(e.target.value)}\n       \n        />\n\n         <input  \n        placeholder=\"password\"\n        type=\"text\"\n        \n        onChange={(e) => setPassword(e.target.value)}\n       \n        />\n        <Button type=\"sumbit\" onClick={signIn}>Sign-In</Button>\n        </center>\n        </form>\n        </div>\n      </Modal>\n\n\n     \n\n\n\n     <div className=\"app_header\">\n     <img \n          className=\"app_headerImage \"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo-2x.png/1b47f9d0e595.png\"/>\n\n        {user ? (<Button onClick={() => auth.signOut()}>Logout</Button>) :\n          (<div className=\"app_logincontainer\">\n            <Button onClick={() => setOpenSignIn(true)}>Sign-In</Button>\n            <Button onClick={() => setOpen(true)}>Sign-up</Button>\n\n          </div>)}\n\n\n    \n      </div> \n      <div className=\"postMain\">\n\n      <div className=\"postLeft\">\n\n{\n        posts.map(({post,id}) => <Post key={id} postid={id} user={user} username={post.username} caption = {post.caption} imageUrl = {post.imageUrl} /> )\n}\n\n</div>\n<div className=\"postRight\">\n<InstagramEmbed\n  url='https://www.instagram.com/p/B9UxIHjJnFu/'\n  maxWidth={320}\n  hideCaption={false}\n  containerTagName='div'\n  protocol=''\n  injectScript\n  onLoading={() => {}}\n  onSuccess={() => {}}\n  onAfterRender={() => {}}\n  onFailure={() => {}}\n/>\n</div>\n\n</div>\n      \n    \n      {user?.displayName ? (<ImageUpload username={user.displayName} />) :\n        (<h3> You need to login </h3>)}\n    \n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}